using CarMarket.Web.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;

namespace CarMarket.Web.Controllers
{
    public class HomeController : Controller
    {

        public ActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public ActionResult Searched(IndexModel mod)
        {
            var context = ApplicationDbContext.Create();

            if (mod.Model != null)
                mod.Model = CarMarket.Web.Models.CarModel.Model.ModelList[mod.Brand][mod.Model];
            if (mod.Brand != null)
                mod.Brand = CarMarket.Web.Models.CarModel.Brand.BrandList[mod.Brand];
            if (mod.Carriage != null)
                mod.Carriage = CarMarket.Web.Models.CarModel.Carriage.carriageList[mod.Carriage];
            if (mod.Fuel != null)
                mod.Fuel = CarMarket.Web.Models.MachineModel.Fuel.FuelList[mod.Fuel];
            if (mod.NumberOfDoors != null)
                mod.NumberOfDoors = CarMarket.Web.Models.MachineModel.NumberOfDoors.doorList[mod.NumberOfDoors];
            if (mod.Gear != null)
                mod.Gear = CarMarket.Web.Models.MachineModel.Gear.gearList[mod.Gear];

            var a = context
                .Car
                .Where(x => x.Brand == mod.Brand && mod.Brand != null)
                .Where(x => x.Model == mod.Model && mod.Model != null)
                .Where(x => x.Carriage == mod.Carriage && mod.Carriage != null)
                .Where(x => x.Fuel == mod.Fuel && mod.Fuel != null)
                .Where(x => x.NumberOfDoors == mod.NumberOfDoors && mod.NumberOfDoors != null)
                .Where(x => x.Gear == mod.Gear && mod.Gear != null)
                .ToList();

            foreach (var car in a)
            {
                var id = car.CarId;
                var name = car.SellerName;
                car.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Car.ToString(), name);
            }

            return View(a);
        }

        [HttpGet]
        public ActionResult UploadFile()
        {
            return View();
        }

        [HttpPost]
        public ActionResult UploadFile(HttpPostedFileBase file)
        {
            string fileFolderVirtualPath = "~/Files/" + User.Identity.Name;
            string fileFolderPhysicalPath = Server.MapPath(fileFolderVirtualPath);

            if (!Directory.Exists(fileFolderPhysicalPath))
                Directory.CreateDirectory(fileFolderPhysicalPath);

            string fileVirtualPath = String.Format("{0}/{1}", fileFolderVirtualPath, file.FileName);
            string filePhysicalPath = Server.MapPath(fileVirtualPath);

            file.SaveAs(filePhysicalPath);

            string fileUrl = Url.Content(fileVirtualPath);

            return View("UploadFile", fileUrl as Object);
        }

        public string BaseImagesFolderVirtualPath { get { return "~/Files/"; } }
        public string BaseImagesFolderPhysicalPath { get { return Server.MapPath(BaseImagesFolderVirtualPath); } }

        public void SaveImagesForMachinerie(int machineriesId, string type, HttpPostedFileBase[] files)
        {

            string imagesFolderPhyscalPath = Path.Combine(BaseImagesFolderPhysicalPath, String.Format(@"{0}\{1}\{2}", type, User.Identity.GetUserName(), machineriesId));

            if (!Directory.Exists(imagesFolderPhyscalPath))
                Directory.CreateDirectory(imagesFolderPhyscalPath);

            foreach (var file in files)
            {
                if (file != null)
                {
                    string filePhysicalPath = Path.Combine(imagesFolderPhyscalPath, String.Format("{0}-{1}", DateTime.Now.Ticks, file.FileName));
                    file.SaveAs(filePhysicalPath);
                }
            }
        }

        public string[] GetImagesForMachinerie(int machineriesId, string type, string userName)
        {
            string imagesFolderPhyscalPath = Path.Combine(BaseImagesFolderPhysicalPath, String.Format(@"{0}\{1}\{2}", type, userName, machineriesId));

            if (!Directory.Exists(imagesFolderPhyscalPath))
                Directory.CreateDirectory(imagesFolderPhyscalPath);

            string[] filePhysicalPaths = Directory.GetFiles(imagesFolderPhyscalPath);

            string[] fileVIrtualPaths = new string[filePhysicalPaths.Length];

            for (int i = 0; i < filePhysicalPaths.Length; i++)
            {
                string physicalPAth = filePhysicalPaths[i];

                string partialPhysicalPAth = physicalPAth.Replace(BaseImagesFolderPhysicalPath, String.Empty);

                string virtualPAth = String.Format("{0}{1}", BaseImagesFolderVirtualPath, partialPhysicalPAth.Replace(@"\", "/")); //VirtualPathUtility.Combine();

                fileVIrtualPaths[i] = virtualPAth;
            }

            return fileVIrtualPaths;
        }

        [HttpGet]
        public ActionResult CreateACar()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateACar(Cars car, HttpPostedFileBase[] files)
        {
            car.Model = Models.CarModel.Model.ModelList[car.Brand][car.Model];
            car.Brand = Models.CarModel.Brand.BrandList[car.Brand];
            car.Carriage = Models.CarModel.Carriage.carriageList[car.Carriage];
            car.Gear = Models.MachineModel.Gear.gearList[car.Gear];
            car.Fuel = Models.MachineModel.Fuel.FuelList[car.Fuel];
            car.NumberOfDoors = Models.MachineModel.NumberOfDoors.doorList[car.NumberOfDoors];
            car.Color = Models.MachineModel.Color.colorList[car.Color];
            car.EuroStandart = Models.MachineModel.EuroStandart.EuroList[car.EuroStandart];
            car.YearOfManufacture = Convert.ToDateTime(car.Months + "." + car.Months + "." + Models.MachineModel.Years.YearsList[car.Years]);

            car.SellerName = User.Identity.Name;
            car.ApplicationUser_Id = User.Identity.GetUserId();

            var context = ApplicationDbContext.Create(); // new ApplicationDbContext()
            context.Car.Add(car);
            context.SaveChanges();

            var carContext = context.Car.ToList();
            var id = carContext[carContext.Count - 1].CarId;

            SaveImagesForMachinerie(id, MachineryTypeEnum.Car.ToString(), files);

            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public ActionResult ViewCars()
        {
            var context = ApplicationDbContext.Create(); // new ApplicationDbContext()
            List<Cars> cars = context.Car.ToList();

            foreach (var car in cars)
            {
                var id = car.CarId;
                var name = car.SellerName;
                car.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Car.ToString(), name);
            }



            cars.Reverse();

            return View(cars);
        }

        [HttpGet]
        public ActionResult CreateABus()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateABus(Buses bus, HttpPostedFileBase[] files)
        {
            bus.Model = Models.BusModel.Model.ModelList[bus.Brand][bus.Model];
            bus.Brand = Models.BusModel.Brand.BrandList[bus.Brand];
            bus.Type = Models.BusModel.Type.TypeList[bus.Type];
            bus.Gear = Models.MachineModel.Gear.gearList[bus.Gear];
            bus.Fuel = Models.MachineModel.Fuel.FuelList[bus.Fuel];
            bus.NumberOfDoors = Models.MachineModel.NumberOfDoors.doorList[bus.NumberOfDoors];
            bus.Color = Models.MachineModel.Color.colorList[bus.Color];
            bus.EuroStandart = Models.MachineModel.EuroStandart.EuroList[bus.EuroStandart];
            bus.YearOfManufacture = Convert.ToDateTime(bus.Months + "." + bus.Months + "." + Models.MachineModel.Years.YearsList[bus.Years]);

            bus.SellerName = User.Identity.Name;
            bus.ApplicationUser_Id = User.Identity.GetUserId();


            var context = ApplicationDbContext.Create(); // new ApplicationDbContext()
            context.Bus.Add(bus);
            context.SaveChanges();

            var busContext = context.Bus.ToList();
            var id = busContext[busContext.Count - 1].BusId;

            SaveImagesForMachinerie(id, MachineryTypeEnum.Bus.ToString(), files);

            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public ActionResult ViewBuses()
        {
            var context = ApplicationDbContext.Create(); // new ApplicationDbContext()

            List<Buses> buses = context.Bus.ToList();

            foreach (var bus in buses)
            {
                var id = bus.BusId;
                var name = bus.SellerName;
                bus.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Bus.ToString(), name);
            }

            buses.Reverse();

            return View(buses);
        }

        [HttpGet]
        public ActionResult CreateAMoto()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateAMoto(Motos moto, HttpPostedFileBase[] files)
        {
            moto.Brand = Models.MotoModel.Brand.MotoList[moto.Brand];
            moto.Category = Models.MotoModel.Category.CategoryList[moto.Category];
            moto.Fuel = Models.MachineModel.Fuel.FuelList[moto.Fuel];
            moto.TypeOfEngine = Models.MotoModel.TypeOfEngine.TypeOfEngineList[moto.TypeOfEngine];
            moto.Gear = Models.MachineModel.Gear.gearList[moto.Gear];
            moto.YearOfManufacture = Convert.ToDateTime(moto.Months + "." + moto.Months + "." + Models.MachineModel.Years.YearsList[moto.Years]);
            moto.Color = Models.MachineModel.Color.colorList[moto.Color];

            moto.SellerName = User.Identity.Name;
            moto.ApplicationUser_Id = User.Identity.GetUserId();

            var context = ApplicationDbContext.Create(); // new ApplicationDbContext()
            context.Moto.Add(moto);

            context.SaveChanges();

            var motoContext = context.Moto.ToList();
            var id = motoContext[motoContext.Count - 1].MotoId;

            SaveImagesForMachinerie(id, MachineryTypeEnum.Moto.ToString(), files);

            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public ActionResult ViewMotos()
        {
            var context = ApplicationDbContext.Create(); // new ApplicationDbContext()

            List<Motos> motos = context.Moto.ToList();

            foreach (var moto in motos)
            {
                var id = moto.MotoId;
                var name = moto.SellerName;
                moto.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Moto.ToString(), name);
            }
            motos.Reverse();

            return View(motos);
        }

        [HttpGet]
        public ActionResult CreateATruck()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateATruck(Trucks truck, HttpPostedFileBase[] files)
        {
            truck.Brand = Models.TruckModel.Brand.BrandList[truck.Brand];
            truck.Category = Models.TruckModel.Category.CategoryList[truck.Category];
            truck.Fuel = Models.MachineModel.Fuel.FuelList[truck.Fuel];
            truck.Axle = Models.TruckModel.Axles.AxlesList[truck.Axle];
            truck.Gear = Models.MachineModel.Gear.gearList[truck.Gear];
            truck.YearOfManufacture = Convert.ToDateTime(truck.Months + "." + truck.Months + "." + Models.MachineModel.Years.YearsList[truck.Years]);
            truck.Color = Models.MachineModel.Color.colorList[truck.Color];

            truck.SellerName = User.Identity.Name;
            truck.ApplicationUser_Id = User.Identity.GetUserId();

            var context = ApplicationDbContext.Create();
            context.Truck.Add(truck);

            context.SaveChanges();

            var truckContext = context.Truck.ToList();
            var id = truckContext[truckContext.Count - 1].TruckId;

            SaveImagesForMachinerie(id, MachineryTypeEnum.Truck.ToString(), files);

            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public ActionResult ViewTrucks()
        {
            var context = ApplicationDbContext.Create(); // new ApplicationDbContext()

            List<Trucks> trucks = context.Truck.ToList();

            foreach (var truck in trucks)
            {
                var id = truck.TruckId;
                var name = truck.SellerName;
                truck.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Truck.ToString(), name);
            }

            trucks.Reverse();

            return View(trucks);
        }

        [HttpGet]
        public ActionResult CreateACamper()
        {
            return View();
        }

        [HttpPost]
        public ActionResult CreateACamper(Campers camper, HttpPostedFileBase[] files)
        {
            camper.Brand = Models.CamperModel.Brand.BrandList[camper.Brand];
            camper.Type = Models.CamperModel.Type.TypeList[camper.Type];
            camper.Fuel = Models.MachineModel.Fuel.FuelList[camper.Fuel];
            camper.Heat = Models.CamperModel.Heat.HeatList[camper.Heat];
            camper.Gear = Models.MachineModel.Gear.gearList[camper.Gear];
            camper.YearOfManifacture = Convert.ToDateTime(camper.Months + "." + camper.Months + "." + Models.MachineModel.Years.YearsList[camper.Years]);
            camper.Color = Models.MachineModel.Color.colorList[camper.Color];

            camper.SellerName = User.Identity.Name;
            camper.ApplicationUser_Id = User.Identity.GetUserId();

            var context = ApplicationDbContext.Create();
            context.Camper.Add(camper);

            context.SaveChanges();

            var campContext = context.Camper.ToList();
            var id = campContext[campContext.Count - 1].CamperId;

            SaveImagesForMachinerie(id, MachineryTypeEnum.Camper.ToString(), files);

            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public ActionResult ViewCampers()
        {
            var context = ApplicationDbContext.Create();
            List<Campers> campers = context.Camper.ToList();
            campers.Reverse();

            foreach (var camper in campers)
            {
                var id = camper.CamperId;
                var name = camper.SellerName;
                camper.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Camper.ToString(), name);
            }
            return View(campers);
        }

        [HttpGet]
        public ActionResult CreateABoat()
        {
            return View();
        }

        [HttpPost]
        public ActionResult CreateABoat(Boats boat, HttpPostedFileBase[] files)
        {
            boat.Type = Models.BoatModel.Type.TypeList[boat.Type];
            boat.Fuel = Models.MachineModel.Fuel.FuelList[boat.Fuel];
            boat.NumberOfEngines = Models.BoatModel.NumberOfEngines.NumberOfEnginesList[boat.NumberOfEngines];
            boat.Material = Models.BoatModel.Material.MaterialList[boat.Material];
            boat.YearOfManufacture = Convert.ToDateTime(boat.Months + "." + boat.Months + "." + Models.MachineModel.Years.YearsList[boat.Years]);
            boat.Color = Models.MachineModel.Color.colorList[boat.Color];

            boat.SellerName = User.Identity.Name;
            boat.ApplicationUser_Id = User.Identity.GetUserId();

            var context = ApplicationDbContext.Create();
            context.Boat.Add(boat);

            context.SaveChanges();

            var boatContext = context.Boat.ToList();
            var id = boatContext[boatContext.Count - 1].BoatId;

            SaveImagesForMachinerie(id, MachineryTypeEnum.Boat.ToString(), files);

            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public ActionResult ViewBoats()
        {
            var context = ApplicationDbContext.Create();
            List<Boats> boats = context.Boat.ToList();
            boats.Reverse();

            foreach (var boat in boats)
            {
                var id = boat.BoatId;
                var name = boat.SellerName;
                boat.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Boat.ToString(), name);
            }

            return View(boats);
        }

        [HttpGet]
        public ActionResult CreateAAgricultural()
        {
            return View();
        }

        [HttpPost]
        public ActionResult CreateAAgricultural(AgriculturalMachineries agricultural, HttpPostedFileBase[] files)
        {
            agricultural.Category = Models.AgriculturalMachineryModel.Category.CategoryList[agricultural.Category];
            agricultural.Fuel = Models.MachineModel.Fuel.FuelList[agricultural.Fuel];
            agricultural.YearOfManufacture = Convert.ToDateTime(agricultural.Months + "." + agricultural.Months + "." + Models.MachineModel.Years.YearsList[agricultural.Years]);

            agricultural.SellerName = User.Identity.Name;
            agricultural.ApplicationUser_Id = User.Identity.GetUserId();

            var context = ApplicationDbContext.Create();
            context.Agricultural.Add(agricultural);

            context.SaveChanges();

            var agriculturalContext = context.Agricultural.ToList();
            var id = agriculturalContext[agriculturalContext.Count - 1].AgriculturalMachineryId;

            SaveImagesForMachinerie(id, MachineryTypeEnum.Agricultural.ToString(), files);

            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public ActionResult ViewAgriculturals()
        {
            var context = ApplicationDbContext.Create();
            List<AgriculturalMachineries> agriculturals = context.Agricultural.ToList();
            agriculturals.Reverse();

            foreach (var agricultural in agriculturals)
            {
                var id = agricultural.AgriculturalMachineryId;
                var name = agricultural.SellerName;
                agricultural.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Agricultural.ToString(), name);
            }

            return View(agriculturals);
        }

        [HttpGet]
        public ActionResult CreateAConstruction()
        {
            return View();
        }

        [HttpPost]
        public ActionResult CreateAConstruction(ConstructionEquipments construction, HttpPostedFileBase[] files)
        {
            construction.Type = Models.ConstructionEquipmentModel.Type.TypeList[construction.Type];
            construction.Fuel = Models.MachineModel.Fuel.FuelList[construction.Fuel];
            construction.Axles = Models.TruckModel.Axles.AxlesList[construction.Axles];
            construction.Operation = Models.ConstructionEquipmentModel.Operation.OperationList[construction.Operation];
            construction.YearOfManufacture = Convert.ToDateTime(construction.Months + "." + construction.Months + "." + Models.MachineModel.Years.YearsList[construction.Years]);

            construction.SellerName = User.Identity.Name;
            construction.ApplicationUser_Id = User.Identity.GetUserId();

            var context = ApplicationDbContext.Create();
            context.Construction.Add(construction);

            context.SaveChanges();

            var contructionContext = context.Construction.ToList();
            var id = contructionContext[contructionContext.Count - 1].ConstructionEquipmenId;

            SaveImagesForMachinerie(id, MachineryTypeEnum.Construction.ToString(), files);

            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public ActionResult ViewConstructions()
        {
            var context = ApplicationDbContext.Create();
            List<ConstructionEquipments> constructions = context.Construction.ToList();

            foreach (var construction in constructions)
            {
                var id = construction.ConstructionEquipmenId;
                var name = construction.SellerName;
                construction.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Construction.ToString(), name);
            }

            constructions.Reverse();

            return View(constructions);
        }

        [HttpGet]
        public ActionResult ViewDetails(int id, MachineryTypeEnum type)
        {
            var context = ApplicationDbContext.Create();

            object result = GetMachine(id, type);
            if (result == null)
            {
                return View("Message", String.Format("Machine with id '{0}' is not found."));
            }
            return View(result);
        }

        private object GetMachine(int id, MachineryTypeEnum type)
        {
            var context = ApplicationDbContext.Create();

            if (type == MachineryTypeEnum.Car)
            {
                var car = context.Set<Cars>().Where(x => x.CarId == id).FirstOrDefault();
                car.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Car.ToString(), car.SellerName);
                return car;
            }
            else if (type == MachineryTypeEnum.Agricultural)
            {
                var agr = context.Set<AgriculturalMachineries>().Where(x => x.AgriculturalMachineryId == id).FirstOrDefault();
                agr.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Agricultural.ToString(), agr.SellerName);
                return agr;
            }
            else if (type == MachineryTypeEnum.Boat)
            {
                var boat = context.Set<Boats>().Where(x => x.BoatId == id).FirstOrDefault();
                boat.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Boat.ToString(), boat.SellerName);
                return boat;
            }
            else if (type == MachineryTypeEnum.Bus)
            {
                var bus = context.Set<Buses>().Where(x => x.BusId == id).FirstOrDefault();
                bus.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Bus.ToString(), bus.SellerName);
                return bus;
            }
            else if (type == MachineryTypeEnum.Camper)
            {
                var camp = context.Set<Campers>().Where(x => x.CamperId == id).FirstOrDefault();
                camp.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Camper.ToString(), camp.SellerName);
                return camp;
            }
            else if (type == MachineryTypeEnum.Construction)
            {
                var contstruct = context.Set<ConstructionEquipments>().Where(x => x.ConstructionEquipmenId == id).FirstOrDefault();
                contstruct.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Construction.ToString(), contstruct.SellerName);
                return contstruct;
            }
            else if (type == MachineryTypeEnum.Moto)
            {
                var moto = context.Set<Motos>().Where(x => x.MotoId == id).FirstOrDefault();
                moto.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Moto.ToString(), moto.SellerName);
                return moto;
            }
            else if (type == MachineryTypeEnum.Truck)
            {
                var truck = context.Set<Trucks>().Where(x => x.TruckId == id).FirstOrDefault();
                truck.ImageVirtualPaths = GetImagesForMachinerie(id, MachineryTypeEnum.Truck.ToString(), truck.SellerName);
                return truck;
            }
            else
            {
                return null;
            }
        }

        [HttpPost]
        public JsonResult GetCarsModel(string ValueOfModel)
        {
            return Json(new SelectList(CarMarket.Web.Models.CarModel.Model.ModelList[ValueOfModel]).Items);
        }
        [HttpPost]
        public JsonResult GetBusesModel(string ValueOfModel)
        {
            return Json(new SelectList(CarMarket.Web.Models.BusModel.Model.ModelList[ValueOfModel]).Items);
        }
    }
}